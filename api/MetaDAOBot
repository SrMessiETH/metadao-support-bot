# Build the application (once, outside handler)
application = Application.builder().token(BOT_TOKEN).build()

# Conversation handler (updated entry point for callback)
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        MAIN_MENU: [
            CallbackQueryHandler(handle_main_menu)
        ],
        SUPPORT_MENU: [
            CallbackQueryHandler(handle_support_menu)
        ],
        WAITING_FOR_QUESTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)
        ],
        WAITING_FOR_FEEDBACK: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_feedback)
        ],
    },
    fallbacks=[CommandHandler('start', start)],
)

# Add handlers
application.add_handler(CallbackQueryHandler(button_handler))
application.add_handler(MessageHandler(filters.Regex(r'^(CA|ca|Ca)$'), handle_ca))
application.add_handler(conv_handler)
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
application.add_handler(MessageHandler(filters.COMMAND, text_handler))  # Handle commands as text

# Vercel serverless function handler for Telegram webhook
from http.server import BaseHTTPRequestHandler
import json
from telegram.ext import Application, Update, CallbackQueryHandler, MessageHandler, filters, CommandHandler

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        """Handle POST requests from Telegram webhook"""
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            
            update_dict = json.loads(post_data.decode('utf-8'))
            update = Update.de_json(update_dict, application.bot)
            
            # Process update synchronously using asyncio
            import asyncio
            asyncio.run(application.process_update(update))
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({"ok": True}).encode())
            
        except Exception as e:
            print(f"[v0] Error processing webhook: {e}")
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({"ok": False, "error": str(e)}).encode())
    
    def do_GET(self):
        """Handle GET requests for health check"""
        self.send_response(200)
        self.send_header('Content-Type', 'text/plain')
        self.end_headers()
        self.wfile.write(b"MetaDAO Bot webhook is running!")
